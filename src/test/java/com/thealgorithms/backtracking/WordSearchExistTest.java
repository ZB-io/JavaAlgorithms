

// ********RoostGPT********
/*
Test generated by RoostGPT for test OpenAII using AI Type  and AI Model 

ROOST_METHOD_HASH=exist_13fb87d8d8
ROOST_METHOD_SIG_HASH=exist_7bc1546c93

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/OpenAII/6027d49d-46d4-459b-bf2d-09388d3ac953/source/JavaAlgorithms/src/test/java/com/thealgorithms/backtracking/WordSearchTest.java
Tests:
    "@Test
@Test
void test1() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "ABCCED";
    assertTrue(ws.exist(board, word));
}
"
    "@Test
@Test
void test2() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "SEE";
    assertTrue(ws.exist(board, word));
}
"
    "@Test
@Test
void test3() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "ABCB";
    Assertions.assertFalse(ws.exist(board, word));
}
""""
Scenario 1: Test when the board is empty

Details:  
  TestName: testEmptyBoard.
  Description: This test checks the functionality of the method when the given board is empty. It ensures the method can handle empty inputs and return the correct result. 
Execution:
  Arrange: Create an instance of WordSearch and an empty 2D char array.
  Act: Call the exist method with the empty array and a random word.
  Assert: Assert that the method returns false.
Validation: 
  The assertion verifies that the method correctly handles an empty board. Since there are no characters on the board, it is impossible to find any word, hence the expected result is false. This scenario is important to ensure the method can handle edge cases and doesn't throw any unexpected errors or exceptions.

Scenario 2: Test when the word is empty

Details:  
  TestName: testEmptyWord.
  Description: This test checks the functionality of the method when the given word is empty. It ensures the method can handle empty inputs and return the correct result. 
Execution:
  Arrange: Create an instance of WordSearch and a random 2D char array.
  Act: Call the exist method with the array and an empty string.
  Assert: Assert that the method returns true.
Validation: 
  The assertion verifies that the method correctly handles an empty word. Since the word is empty, it can be "found" in any board, hence the expected result is true. This scenario is important to ensure the method can handle edge cases and doesn't throw any unexpected errors or exceptions.

Scenario 3: Test when the word is longer than the number of characters on the board

Details:  
  TestName: testWordLongerThanBoard.
  Description: This test checks the functionality of the method when the length of the given word is greater than the number of characters on the board. It ensures the method can handle such cases and return the correct result. 
Execution:
  Arrange: Create an instance of WordSearch and a 2D char array of a certain size.
  Act: Call the exist method with the array and a word whose length is greater than the number of characters on the board.
  Assert: Assert that the method returns false.
Validation: 
  The assertion verifies that the method correctly handles a word whose length is greater than the number of characters on the board. Since the word is longer, it cannot be found on the board, hence the expected result is false. This scenario is important to ensure the method can handle edge cases and doesn't throw any unexpected errors or exceptions.
"""
*/

// ********RoostGPT********

package com.thealgorithms.backtracking;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;

public class WordSearchExistTest {
    private WordSearch wordSearch;
    @BeforeEach
    public void setup() {
        wordSearch = new WordSearch();
    }
    @Test
    @Tag("boundary")
    public void testEmptyBoard() {
        char[][] board = new char[0][0];
        String word = "hello";
        assertFalse(wordSearch.exist(board, word));
    }
    @Test
    @Tag("boundary")
    public void testEmptyWord() {
        char[][] board = {{'a', 'b'}, {'c', 'd'}};
        String word = "";
        assertTrue(wordSearch.exist(board, word));
    }
    @Test
    @Tag("boundary")
    public void testWordLongerThanBoard() {
        char[][] board = {{'a', 'b'}, {'c', 'd'}};
        String word = "abcdefgh";
        assertFalse(wordSearch.exist(board, word));
    }
    @Test
    @Tag("valid")
    public void testWordExistsInBoard() {
        char[][] board = {{'a', 'b', 'c', 'd'}, {'e', 'f', 'g', 'h'}, {'i', 'j', 'k', 'l'}, {'m', 'n', 'o', 'p'}};
        String word = "abcd";
        assertTrue(wordSearch.exist(board, word));
    }
    @Test
    @Tag("invalid")
    public void testWordNotExistsInBoard() {
        char[][] board = {{'a', 'b', 'c', 'd'}, {'e', 'f', 'g', 'h'}, {'i', 'j', 'k', 'l'}, {'m', 'n', 'o', 'p'}};
        String word = "xyz";
        assertFalse(wordSearch.exist(board, word));
    }
}