
// ********RoostGPT********
/*
Test generated by RoostGPT for test OpenAII using AI Type  and AI Model

ROOST_METHOD_HASH=exist_13fb87d8d8
ROOST_METHOD_SIG_HASH=exist_7bc1546c93

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/OpenAII/6caf0f77-b77b-4c52-ace3-062c47fba289/source/JavaAlgorithms/src/test/java/com/thealgorithms/backtracking/WordSearchTest.java
Tests:
    "@Test
@Test
void test1() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "ABCCED";
    assertTrue(ws.exist(board, word));
}
"
    "@Test
@Test
void test2() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "SEE";
    assertTrue(ws.exist(board, word));
}
"
    "@Test
@Test
void test3() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "ABCB";
    Assertions.assertFalse(ws.exist(board, word));
}
""""
  Scenario 1: Test when the entire word matches across rows

  Details:
    TestName: testEntireWordAcrossRows.
    Description: This test is intended to validate when a word is present across rows in the board. The test scenario fulfilling this condition should return true.
  Execution:
    Arrange: Initialize new object of WordSearch and char[][] board with characters containing the string "HELLO" across rows.
    Act: Call exist method by passing board and "HELLO".
    Assert: Assert that the exist method should return true.
  Validation:
    The assertion confirms that the method correctly identifies words that span across rows. This is significant as it verifies the method's core functionality of identifying existing words in the board across rows.

  Scenario 2: Test when the entire word matches across columns

  Details:
    TestName: testEntireWordAcrossColumns.
    Description: This test aims to validate when a word is present across columns in the board. The test scenario fulfilling this condition should return true.
  Execution:
    Arrange: Initialize new object of WordSearch and char[][] board with characters containing the string "HELLO" across columns.
    Act: Call exist method by passing board and "HELLO".
    Assert: Assert that the exist method should return true.
  Validation:
    The assertion verifies that the method correctly identifies words that span across columns. This validates the method's functionality of identifying existing words in the board across columns.

  Scenario 3: Test when the board does not contain the word

  Details:
    TestName: testWordNotInBoard.
    Description: This test is intended to validate when a word is not present in the board. The test scenario fulfilling this condition should return false.
  Execution:
    Arrange: Initialize new object of WordSearch and char[][] board with characters that does not contain the string "HELLO".
    Act: Call exist method by passing board and "HELLO".
    Assert: Assert that the exist method should return false.
  Validation:
    The assertion confirms that the method correctly identifies when a word does not exist in the board. This test is crucial in ensuring the method does not falsely identify non-existent words.

  Scenario 4: Test when the word is partly available but not completely in the board

  Details:
    TestName: testPartialWordExistsInBoard.
    Description: This test validates when a word is partially (but not completely) present in the board. The test scenario fulfilling this condition should return false.
  Execution:
    Arrange: Initialize new object of WordSearch and char[][] board with characters that contain part of the string, such as "HE".
    Act: Call exist method by passing board and "HELLO".
    Assert: Assert that the exist method should return false.
  Validation:
    This assertion verifies the method correctly identifies when a word is not fully present in the board, even if parts of it are. This test is critical in ensuring the method does not falsely identify words that are partially present.

  Scenario 5: Test when a single character word is present in the board

  Details:
    TestName: testSingleCharWordExistsInBoard.
    Description: This test verifies when a single character word is present in the board. The test scenario fulfilling this condition should return true.
  Execution:
    Arrange: Initialize new object of WordSearch and char[][] board with characters containing the character "A".
    Act: Call exist method by passing board and "A".
    Assert: Assert that the exist method should return true.
  Validation:
    This assertion verifies the method correctly identifies when single character words exist in the board. It is crucial in confirming the method's accuracy in identifying single character words.
"""
*/

// ********RoostGPT********

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.assertj.core.api.Assertions.assertThat;

public class WordSearchExistTest {

	@Test
	@Tag("valid")
	public void testEntireWordAcrossRows() {
		WordSearch wordSearch = new WordSearch();
		char[][] board = { { 'H', 'E', 'L', 'L', 'O' }, { 'B', 'C', 'D', 'E', 'F' }, { 'G', 'H', 'I', 'J', 'K' },
				{ 'L', 'M', 'N', 'O', 'P' }, { 'Q', 'R', 'S', 'T', 'U' } };
		assertThat(wordSearch.exist(board, "HELLO")).isTrue();
	}

	@Test
	@Tag("valid")
	public void testEntireWordAcrossColumns() {
		WordSearch wordSearch = new WordSearch();
		char[][] board = { { 'H', 'B', 'G', 'L', 'Q' }, { 'E', 'C', 'H', 'M', 'R' }, { 'L', 'D', 'I', 'N', 'S' },
				{ 'L', 'E', 'J', 'O', 'T' }, { 'O', 'F', 'K', 'P', 'U' } };
		assertThat(wordSearch.exist(board, "HELLO")).isTrue();
	}

	@Test
	@Tag("invalid")
	public void testWordNotInBoard() {
		WordSearch wordSearch = new WordSearch();
		char[][] board = { { 'A', 'B', 'C', 'D', 'E' }, { 'F', 'G', 'H', 'I', 'J' }, { 'K', 'L', 'M', 'N', 'O' },
				{ 'P', 'Q', 'R', 'S', 'T' }, { 'U', 'V', 'W', 'X', 'Y' } };
		assertThat(wordSearch.exist(board, "HELLO")).isFalse();
	}

	@Test
	@Tag("invalid")
	public void testPartialWordExistsInBoard() {
		WordSearch wordSearch = new WordSearch();
		char[][] board = { { 'H', 'E', 'A', 'B', 'C' }, { 'D', 'E', 'F', 'G', 'H' }, { 'I', 'J', 'K', 'L', 'M' },
				{ 'N', 'O', 'P', 'Q', 'R' }, { 'S', 'T', 'U', 'V', 'W' } };
		assertThat(wordSearch.exist(board, "HELLO")).isFalse();
	}

	@Test
	@Tag("boundary")
	public void testSingleCharWordExistsInBoard() {
		WordSearch wordSearch = new WordSearch();
		char[][] board = { { 'A', 'B', 'C', 'D', 'E' }, { 'F', 'G', 'H', 'I', 'J' }, { 'K', 'L', 'M', 'N', 'O' },
				{ 'P', 'Q', 'R', 'S', 'T' }, { 'U', 'V', 'W', 'X', 'Y' } };
		assertThat(wordSearch.exist(board, "A")).isTrue();
	}

}