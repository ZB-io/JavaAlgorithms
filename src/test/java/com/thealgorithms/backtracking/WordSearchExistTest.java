

// ********RoostGPT********
/*
Test generated by RoostGPT for test OpenAII using AI Type  and AI Model 

ROOST_METHOD_HASH=exist_13fb87d8d8
ROOST_METHOD_SIG_HASH=exist_7bc1546c93

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/OpenAII/26ab2638-dba2-485c-8149-06b142aca068/source/JavaAlgorithms/src/test/java/com/thealgorithms/backtracking/WordSearchTest.java
Tests:
    "@Test
@Test
void test1() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "ABCCED";
    assertTrue(ws.exist(board, word));
}
"
    "@Test
@Test
void test2() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "SEE";
    assertTrue(ws.exist(board, word));
}
"
    "@Test
@Test
void test3() {
    WordSearch ws = new WordSearch();
    char[][] board = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
    String word = "ABCB";
    Assertions.assertFalse(ws.exist(board, word));
}
""""
  Scenario 1: Test when the word exists in a single row of the board

  Details:  
    TestName: testWordExistsInSingleRow.
    Description: This test checks that the method correctly identifies when the provided word exists in a single row of the board. 
  Execution:
    Arrange: Create an instance of WordSearch and a 2D character array with a row containing the word.
    Act: Call the exist method with the 2D array and the word.
    Assert: Assert that the result is true.
  Validation: 
    This test validates that the method correctly identifies words that are present in a single row of the board. This is an important functionality as words can be present in any direction on the board.

  Scenario 2: Test when the word exists in a single column of the board

  Details:  
    TestName: testWordExistsInSingleColumn.
    Description: This test checks that the method correctly identifies when the provided word exists in a single column of the board. 
  Execution:
    Arrange: Create an instance of WordSearch and a 2D character array with a column containing the word.
    Act: Call the exist method with the 2D array and the word.
    Assert: Assert that the result is true.
  Validation: 
    This test validates that the method correctly identifies words that are present in a single column of the board. This is an important functionality as words can be present in any direction on the board.

  Scenario 3: Test when the word does not exist in the board

  Details:  
    TestName: testWordDoesNotExist.
    Description: This test checks that the method correctly identifies when the provided word does not exist in the board. 
  Execution:
    Arrange: Create an instance of WordSearch and a 2D character array that does not contain the word.
    Act: Call the exist method with the 2D array and the word.
    Assert: Assert that the result is false.
  Validation: 
    This test validates that the method correctly identifies when a word is not present in the board. This is a crucial functionality for the accuracy of the WordSearch class.

  Scenario 4: Test when the board is empty

  Details:  
    TestName: testEmptyBoard.
    Description: This test checks that the method handles the case when the board is empty. 
  Execution:
    Arrange: Create an instance of WordSearch and an empty 2D character array.
    Act: Call the exist method with the empty array and any word.
    Assert: Assert that the result is false.
  Validation: 
    This test validates that the method correctly handles the case of an empty board. It is important to handle this edge case to avoid runtime errors and to ensure the method behaves as expected.

  Scenario 5: Test when the word is empty

  Details:  
    TestName: testEmptyWord.
    Description: This test checks that the method handles the case when the word is empty. 
  Execution:
    Arrange: Create an instance of WordSearch and any 2D character array.
    Act: Call the exist method with the array and an empty word.
    Assert: Assert that the result is false.
  Validation: 
    This test validates that the method correctly handles the case of an empty word. It is important to handle this edge case to avoid runtime errors and to ensure the method behaves as expected.
"""
*/

// ********RoostGPT********

package com.thealgorithms.backtracking;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.BeforeEach;
import static org.junit.jupiter.api.Assertions.*;

public class WordSearchExistTest {
    private WordSearch wordSearch;
    @BeforeEach
    public void setUp() {
        wordSearch = new WordSearch();
    }
    @Tag("valid")
    @Test
    public void testWordExistsInSingleRow() {
        char[][] board = {{'A', 'B', 'C', 'D'}, {'E', 'F', 'G', 'H'}, {'I', 'J', 'K', 'L'}};
        String word = "ABCD";
        assertTrue(wordSearch.exist(board, word));
    }
    @Tag("valid")
    @Test
    public void testWordExistsInSingleColumn() {
        char[][] board = {{'A', 'E', 'I'}, {'B', 'F', 'J'}, {'C', 'G', 'K'}, {'D', 'H', 'L'}};
        String word = "AEI";
        assertTrue(wordSearch.exist(board, word));
    }
    @Tag("invalid")
    @Test
    public void testWordDoesNotExist() {
        char[][] board = {{'A', 'B', 'C', 'D'}, {'E', 'F', 'G', 'H'}, {'I', 'J', 'K', 'L'}};
        String word = "ZXYW";
        assertFalse(wordSearch.exist(board, word));
    }
    @Tag("boundary")
    @Test
    public void testEmptyBoard() {
        char[][] board = new char[0][0];
        String word = "ABCD";
        assertFalse(wordSearch.exist(board, word));
    }
    @Tag("boundary")
    @Test
    public void testEmptyWord() {
        char[][] board = {{'A', 'B', 'C', 'D'}, {'E', 'F', 'G', 'H'}, {'I', 'J', 'K', 'L'}};
        String word = "";
        assertFalse(wordSearch.exist(board, word));
    }
}