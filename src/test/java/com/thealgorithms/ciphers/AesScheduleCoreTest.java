
// ********RoostGPT********
/*
Test generated by RoostGPT for test OpenAII using AI Type  and AI Model

ROOST_METHOD_HASH=scheduleCore_02d3b3e15a
ROOST_METHOD_SIG_HASH=scheduleCore_39a36839f6

Scenario 1: Test for verifying the output of scheduleCore method with valid inputs

Details:
    TestName: validateScheduleCoreWorkingWithValidInputs.
    Description: This test ensures that the scheduleCore method functions as intended when given valid input. The input data will consist of a random 128-bit BigInteger value and a valid rconCounter integer number.

Execution:
    Arrange: Initialize a BigInteger object with a randomly chosen 128-bit integer value and an integer variable rconCounter with a valid value.
    Act: Call the scheduleCore method by passing the initialized BigInteger object and the integer variable.
    Assert: The output received from the method should match the expected value.

Validation:
    This test asserts that the scheduleCore method is working correctly when provided with valid input parameters. If the method returns the correct output, it implies the function can accurately perform Rijndael key expansion operations.

Scenario 2: Test for checking the response of scheduleCore method when rconCounter has a value exceeding its range

Details:
    TestName: validateScheduleCoreWithOutOfRangeRconCounter.
    Description: This test checks how the scheduleCore method reacts when provided with an rconCounter which exceeds its expected value. The input will consist of a valid BigInteger value and an rconCounter integer that lies outside its expected range.

Execution:
    Arrange: Initialize a BigInteger object with a randomly chosen 128-bit integer value and an integer variable rconCounter with an out-of-range value.
    Act: Call the scheduleCore method by passing the initialized BigInteger object and the integer variable.
    Assert: The method should throw an appropriate exception indicating the presence of an out-of-range value.

Validation:
    This scenario aims to check the error handling capability of the scheduleCore method in case of an out-of-range rconCounter input. The test is crucial to ensure that the application is robust and can handle incorrect inputs gracefully.

Scenario 3: Test to verify the return type of the scheduleCore method

Details:
    TestName: validateReturnTypeOfScheduleCore.
    Description: This test is designed to validate that the return type of the scheduleCore method is BigInteger as expected.

Execution:
    Arrange: Initialize a BigInteger object with a randomly chosen 128-bit integer value and an integer variable rconCounter with a valid value.
    Act: Call the scheduleCore method by passing the initialized BigInteger object and the integer variable.
    Assert: Confirm that the returned object is of the BigInteger type.

Validation:
    The main purpose of this assertion is to validate that the scheduleCore method is returning the expected data type. The test ensures that the method contract is not violated, aiding in integrating this piece of code with other parts of the application.
*/

// ********RoostGPT********

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.math.BigInteger;
import org.junit.jupiter.api.*;
import java.util.Scanner;

public class AesScheduleCoreTest {

	@Test
	@Tag("valid")
	public void validateScheduleCoreWorkingWithValidInputs() {
		BigInteger t = new BigInteger("730dcdb6ed79d246", 16);
		int rconCounter = 8;
		BigInteger result = AES.scheduleCore(t, rconCounter);
		BigInteger expected = new BigInteger("28bfe05f1001ba1c", 16);
		assertEquals(expected, result, "Expected value does not match the returned value");
	}

	@Test
	@Tag("invalid")
	public void validateScheduleCoreWithOutOfRangeRconCounter() {
		BigInteger t = new BigInteger("74568cdc48c73b4e", 16);
		int rconCounter = 156; // RCON array contains only 256 elements, index 156 is out
								// of this range
		assertThrows(ArrayIndexOutOfBoundsException.class, () -> AES.scheduleCore(t, rconCounter),
				"Expected an ArrayIndexOutOfBoundsException");
	}

	@Test
	@Tag("valid")
	public void validateReturnTypeOfScheduleCore() {
		BigInteger t = new BigInteger("74284c67a83db5ed", 16);
		int rconCounter = 7;
		BigInteger result = AES.scheduleCore(t, rconCounter);
		assertEquals(BigInteger.class, result.getClass(), "Expected return type does not match actual return type");
	}

}