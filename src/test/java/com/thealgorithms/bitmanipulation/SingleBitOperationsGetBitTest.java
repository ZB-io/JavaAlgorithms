
// ********RoostGPT********
/*
Test generated by RoostGPT for test OpenAII using AI Type  and AI Model

ROOST_METHOD_HASH=getBit_487c75a4b3
ROOST_METHOD_SIG_HASH=getBit_2ea30e777d

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/OpenAII/6caf0f77-b77b-4c52-ace3-062c47fba289/source/JavaAlgorithms/src/test/java/com/thealgorithms/bitmanipulation/SingleBitOperationsTest.java
Tests:
    "@Test
@Test
public void getBitTest() {
    assertEquals(0, SingleBitOperations.getBit(6, 0));
    assertEquals(1, SingleBitOperations.getBit(7, 1));
}
"Scenario 1: Check if bit is clear at a certain index.

Details:
    TestName: clearBitAtGivenIndex
    Description: This scenario is meant to check that the getBit method correctly checks if a bit at a certain index is clear.
  Execution:
    Arrange: Prepare an integer num where the bit at a specified index bit is clear (0).
    Act: Invoke the getBit method of SingleBitOperations with num and bit as the arguments.
    Assert: Assert that the result is 0 indicating that the bit at the index was clear to begin with.
  Validation:
    This test validation is necessary to confirm that the getBit method correctly checks if a bit is clear at a particular index.
    A correct operation of this functionality ensures that the rest of the bit operations in SingleBitOperations class are correctly performing the respective binary operations.

Scenario 2: Check if a bit is set at a given index.

Details:
    TestName: setBitAtGivenIndex
    Description: This scenario is meant to check that the getBit method correctly checks if a bit at a certain index is set.
  Execution:
    Arrange: prepare an integer num where the bit at index bit is set (1).
    Act: Invoke the getBit method of SingleBitOperations with num and bit as arguments.
    Assert: Assert that the result is 1, indicating that the bit at the index was set to start with.
  Validation:
    This test validation is necessary to confirm that the getBit method correctly checks if a bit is set at a particular index.
    A correct operation of this functionality ensures that the rest of the bit operations in SingleBitOperations class are correctly performing the respective binary operations.

Scenario 3: Edge Case - Checking bit at index 0.

Details:
    TestName: checkBitAtZero
    Description: This scenario is meant to check that the getBit method correctly checks a bit at the index 0.
  Execution:
    Arrange: prepare an integer num where the least significant bit is set or clear.
    Act: Invoke the getBit method of SingleBitOperations with num and 0 as arguments.
    Assert: Assert that the result correctly reflects the value of the bit at index 0.
  Validation:
    This test is important to confirm that the getBit method correctly works with the least significant bit (LSB).
    If this test fails, it would mean that the method may not be correctly shifting bits, which would affect the validity of other operations in this class.

Scenario 4: Edge Case - Checking bit out of integer range.

Details:
    TestName: checkBitOutOfIntegerRange
    Description: This scenario is meant to check that the getBit method correctly handles a bit index that is out of the integer range.
  Execution:
    Arrange: Prepare an integer, num.
    Act: Invoke the getBit method of SingleBitOperations with num and an index that is larger than the maximum index of an integer (31 for integer in Java) as arguments.
    Assert: Assert whether the method handles this case without throwing an error.
  Validation:
    This test is important to confirm that the method doesn't cause an error when it is used with a bit index outside the valid integer range.
    Its importance lies in making sure the code is robust even in the face of erroneous usage.
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;
import org.junit.jupiter.api.*;

public class SingleBitOperationsGetBitTest {

	@Test
	@Tag("valid")
	public void clearBitAtGivenIndex() {
		int num = 2; // bit at index 1 is clear (0)
		int bit = 1;
		assertThat(SingleBitOperations.getBit(num, bit)).isEqualTo(0);
	}

	@Test
	@Tag("valid")
	public void setBitAtGivenIndex() {
		int num = 5; // bit at index 2 is set (1)
		int bit = 2;
		assertThat(SingleBitOperations.getBit(num, bit)).isEqualTo(1);
	}

	@Test
	@Tag("boundary")
	public void checkBitAtZero() {
		int num = 1; // least significant bit is set (1)
		assertThat(SingleBitOperations.getBit(num, 0)).isEqualTo(1);
		num = 2; // least significant bit is clear (0)
		assertThat(SingleBitOperations.getBit(num, 0)).isEqualTo(0);
	}

	@Test
	@Tag("invalid")
	public void checkBitOutOfIntegerRange() {
		int num = 1;
		assertThat(SingleBitOperations.getBit(num, 32)).isNotEqualTo(1);
		assertThat(SingleBitOperations.getBit(num, 32)).isNotEqualTo(0);
	}

}