
// ********RoostGPT********
/*
Test generated by RoostGPT for test OpenAII using AI Type  and AI Model 

ROOST_METHOD_HASH=clearBit_2bb8df5689
ROOST_METHOD_SIG_HASH=clearBit_41db29e3ee

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/OpenAII/26ab2638-dba2-485c-8149-06b142aca068/source/JavaAlgorithms/src/test/java/com/thealgorithms/bitmanipulation/SingleBitOperationsTest.java
Tests:
    "@Test
@Test
public void clearBitTest() {
    assertEquals(5, SingleBitOperations.clearBit(7, 1));
    assertEquals(5, SingleBitOperations.clearBit(5, 1));
}
""""
  Scenario 1: Test to clear bit at zero position
  Details:  
    TestName: clearBitAtZeroPosition
    Description: This test is designed to verify if the clearBit method can correctly clear the bit at the zero position in a given number.
  Execution:
    Arrange: Define a number with the first bit set to 1 (e.g., num = 7).
    Act: Invoke clearBit method with parameters num and bit set to 0.
    Assert: Assert that the returned number is 6.
  Validation: 
    The assertion verifies that the bit at position zero has been cleared successfully. The expected result is based on the binary representation of the number 7 (0111), where clearing the bit at position zero would result in the number 6 (0110).

  Scenario 2: Test to clear bit at a position greater than the number's size
  Details:  
    TestName: clearBitAtPositionGreaterThanSize
    Description: This test is designed to verify if the clearBit method can handle the scenario where the bit position is greater than the size of the number.
  Execution:
    Arrange: Define a number (e.g., num = 7).
    Act: Invoke clearBit method with parameters num and bit set to a value greater than the number's size (e.g., bit = 5).
    Assert: Assert that the returned number is equal to the original number (7).
  Validation: 
    The assertion verifies that the clearBit method correctly handles the scenario where the bit position is greater than the size of the number. The expected result is the same as the original number, as there is no bit at the specified position to clear.

  Scenario 3: Test to clear bit at negative position
  Details:  
    TestName: clearBitAtNegativePosition
    Description: This test is designed to verify if the clearBit method can handle the scenario where the bit position is negative.
  Execution:
    Arrange: Define a number (e.g., num = 7).
    Act: Invoke clearBit method with parameters num and bit set to a negative value (e.g., bit = -1).
    Assert: Assert that an exception is thrown.
  Validation: 
    The assertion verifies that the clearBit method correctly handles the scenario where the bit position is negative. The expected result is an exception, as the bit position cannot be negative.

  Scenario 4: Test to clear bit at the maximum integer value
  Details:  
    TestName: clearBitAtMaxIntegerValue
    Description: This test is designed to verify if the clearBit method can handle the scenario where the number is the maximum integer value.
  Execution:
    Arrange: Define a number as the maximum integer value (e.g., num = Integer.MAX_VALUE).
    Act: Invoke clearBit method with parameters num and bit set to a valid value (e.g., bit = 0).
    Assert: Assert that the returned number is less than the original number (Integer.MAX_VALUE).
  Validation: 
    The assertion verifies that the clearBit method correctly handles the scenario where the number is the maximum integer value. The expected result is a number less than Integer.MAX_VALUE, as clearing any bit from the maximum integer value would result in a smaller number.
"""
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class SingleBitOperationsClearBitTest {
    @Test
    @Tag("valid")
    public void clearBitAtZeroPosition() {
        int num = 7; // binary representation: 0111
        int bit = 0;
        int expected = 6; // binary representation: 0110
        assertEquals(expected, SingleBitOperations.clearBit(num, bit));
    }
    @Test
    @Tag("valid")
    public void clearBitAtPositionGreaterThanSize() {
        int num = 7; // binary representation: 0111
        int bit = 5;
        int expected = 7; // binary representation: 0111
        assertEquals(expected, SingleBitOperations.clearBit(num, bit));
    }
    @Test
    @Tag("invalid")
    public void clearBitAtNegativePosition() {
        int num = 7; // binary representation: 0111
        int bit = -1;
        assertThrows(IllegalArgumentException.class, () -> SingleBitOperations.clearBit(num, bit));
    }
    @Test
    @Tag("boundary")
    public void clearBitAtMaxIntegerValue() {
        int num = Integer.MAX_VALUE;
        int bit = 0;
        int expected = num - 1;
        assertEquals(expected, SingleBitOperations.clearBit(num, bit));
    }
}