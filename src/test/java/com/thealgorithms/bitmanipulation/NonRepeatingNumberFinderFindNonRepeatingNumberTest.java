
// ********RoostGPT********
/*
Test generated by RoostGPT for test OpenAII using AI Type  and AI Model

ROOST_METHOD_HASH=findNonRepeatingNumber_8b3b5ba7c8
ROOST_METHOD_SIG_HASH=findNonRepeatingNumber_825a284e43

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/OpenAII/6caf0f77-b77b-4c52-ace3-062c47fba289/source/JavaAlgorithms/src/test/java/com/thealgorithms/bitmanipulation/NonRepeatingNumberFinderTest.java
Tests:
    "@Test
@Test
void testNonRepeatingNumberFinder() {
    int[] arr = { 1, 2, 1, 2, 6 };
    assertEquals(6, NonRepeatingNumberFinder.findNonRepeatingNumber(arr));
    int[] arr1 = { 1, 2, 1, 2 };
    assertEquals(0, NonRepeatingNumberFinder.findNonRepeatingNumber(arr1));
    int[] arr2 = { 12 };
    assertEquals(12, NonRepeatingNumberFinder.findNonRepeatingNumber(arr2));
}
""""
Scenario 1: Testing with an array containing only one unique non-repeated number among duplicate numbers
Details:
TestName: testUniqueNonRepeatedNumber
Description: This test is meant to check if the function correctly identifies the only unique non-repeated number present in an array containing duplicate numbers
Execution:
Arrange: An array of integers containing one unique non-repeated number will be used for this test scenario
Act: Invoke the target method with the array as parameter
Assert: Assert that the returned integer is the unique non-repeated number present in the array
Validation:
This assertion aims to verify that the function correctly identifies the unique non-repeated number present in the array. The successful passing of this test validates that the function correctly handles the case when there is only one unique non-repeated number present in the array

Scenario 2: Testing with an array containing all duplicate numbers
Details:
TestName: testAllRepeatedNumbers
Description: This test is meant to check if the function correctly returns 0 when an array containing only duplicate numbers is passed as parameter
Execution:
Arrange: Use an array of integers containing all duplicate numbers for this test scenario
Act: Invoke the target method with the array as parameter
Assert: Assert that the returned integer is 0
Validation:
This assertion aims to verify that the function correctly returns 0 when there are no non-repeating numbers present in the array. The successful passing of this test validates that the function correctly handles the case when there are no non-repeating numbers present in the array

Scenario 3: Testing with an array containing only one number
Details:
TestName: testSingleElementArray
Description: This test is meant to check if the function correctly returns the single number present in the array
Execution:
Arrange: An array with a single integer will be used for this test scenario
Act: Invoke the target method with the array as parameter
Assert: Assert that the returned integer is the single number present in the array
Validation:
This assertion aims to verify that the function correctly returns the single number present in the array. The successful passing of this test validates that the function correctly handles the case when there is only one number present in the array

Scenario 4: Testing with an array containing two different non-repeated numbers
Details:
TestName: testTwoNonRepeatedNumbers
Description: This test is meant to check if the function correctly returns the XOR of the two non-repeated numbers
Execution:
Arrange: An array containing two different non-repeated numbers will be used for this scenario
Act: Invoke the target method with the array as parameter
Assert: Assert that the returned integer is the XOR of the two non-repeated numbers
Validation:
This assertion is meant to verify that the function properly returns the XOR of the two non-repeated numbers. The successful passing of this test validates the XOR operation in the function.

"""
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class NonRepeatingNumberFinderFindNonRepeatingNumberTest {

	@Test
	@Tag("valid")
	public void testUniqueNonRepeatedNumber() {
		var arr = new int[] { 2, 3, 5, 4, 5, 3, 4 };
		int uniqueNum = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
		assertEquals(2, uniqueNum);
	}

	@Test
	@Tag("invalid")
	public void testAllRepeatedNumbers() {
		var arr = new int[] { 1, 1, 2, 2, 3, 3, 4, 4 };
		int uniqueNum = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
		assertEquals(0, uniqueNum);
	}

	@Test
	@Tag("boundary")
	public void testSingleElementArray() {
		var arr = new int[] { 7 };
		int uniqueNum = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
		assertEquals(7, uniqueNum);
	}

	@Test
	@Tag("valid")
	public void testTwoNonRepeatedNumbers() {
		var arr = new int[] { 9, 6 };
		int uniqueNum = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
		assertEquals(9 ^ 6, uniqueNum);
	}

}