

// ********RoostGPT********
/*
Test generated by RoostGPT for test OpenAII using AI Type  and AI Model 

ROOST_METHOD_HASH=findNonRepeatingNumber_8b3b5ba7c8
ROOST_METHOD_SIG_HASH=findNonRepeatingNumber_825a284e43

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/OpenAII/26ab2638-dba2-485c-8149-06b142aca068/source/JavaAlgorithms/src/test/java/com/thealgorithms/bitmanipulation/NonRepeatingNumberFinderTest.java
Tests:
    "@Test
@Test
void testNonRepeatingNumberFinder() {
    int[] arr = { 1, 2, 1, 2, 6 };
    assertEquals(6, NonRepeatingNumberFinder.findNonRepeatingNumber(arr));
    int[] arr1 = { 1, 2, 1, 2 };
    assertEquals(0, NonRepeatingNumberFinder.findNonRepeatingNumber(arr1));
    int[] arr2 = { 12 };
    assertEquals(12, NonRepeatingNumberFinder.findNonRepeatingNumber(arr2));
}
""""
Scenario 1: Test with an array of positive numbers containing non-repeating number
Details:  
  TestName: testPositiveNumbersWithNonRepeatingNumber
  Description: This test is meant to check the functionality of the method when the input array contains positive numbers with a non-repeating number.
Execution:
  Arrange: Create an array of positive numbers with a non-repeating number.
  Act: Invoke the findNonRepeatingNumber method with the created array.
  Assert: Use JUnit assertions to compare the returned result against the expected non-repeating number.
Validation: 
  This assertion verifies that the method correctly identifies the non-repeating number among the positive numbers. This is significant in ensuring the correct functionality of the method when dealing with positive numbers.

Scenario 2: Test with an array of negative numbers containing non-repeating number
Details:  
  TestName: testNegativeNumbersWithNonRepeatingNumber
  Description: This test is meant to check the functionality of the method when the input array contains negative numbers with a non-repeating number.
Execution:
  Arrange: Create an array of negative numbers with a non-repeating number.
  Act: Invoke the findNonRepeatingNumber method with the created array.
  Assert: Use JUnit assertions to compare the returned result against the expected non-repeating number.
Validation: 
  This assertion verifies that the method correctly identifies the non-repeating number among the negative numbers. This is significant in ensuring the correct functionality of the method when dealing with negative numbers.

Scenario 3: Test with an array of mixed positive and negative numbers containing non-repeating number
Details:  
  TestName: testMixedNumbersWithNonRepeatingNumber
  Description: This test is meant to check the functionality of the method when the input array contains a mix of positive and negative numbers with a non-repeating number.
Execution:
  Arrange: Create an array of mixed positive and negative numbers with a non-repeating number.
  Act: Invoke the findNonRepeatingNumber method with the created array.
  Assert: Use JUnit assertions to compare the returned result against the expected non-repeating number.
Validation: 
  This assertion verifies that the method correctly identifies the non-repeating number among the mixed numbers. This is significant in ensuring the correct functionality of the method when dealing with mixed numbers.

Scenario 4: Test with an array containing all repeating numbers
Details:  
  TestName: testAllRepeatingNumbers
  Description: This test is meant to check the functionality of the method when the input array contains all repeating numbers.
Execution:
  Arrange: Create an array of all repeating numbers.
  Act: Invoke the findNonRepeatingNumber method with the created array.
  Assert: Use JUnit assertions to compare the returned result against the expected outcome, which should be 0.
Validation: 
  This assertion verifies that the method correctly returns 0 when all numbers in the array are repeating. This is significant in ensuring the correct functionality of the method when dealing with repeating numbers.

Scenario 5: Test with an empty array
Details:  
  TestName: testEmptyArray
  Description: This test is meant to check the functionality of the method when the input array is empty.
Execution:
  Arrange: Create an empty array.
  Act: Invoke the findNonRepeatingNumber method with the created array.
  Assert: Use JUnit assertions to compare the returned result against the expected outcome, which should be 0.
Validation: 
  This assertion verifies that the method correctly returns 0 when the input array is empty. This is significant in ensuring the correct functionality of the method when dealing with empty arrays.
"""
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class NonRepeatingNumberFinderFindNonRepeatingNumberTest {
    @Test
    @Tag("valid")
    public void testPositiveNumbersWithNonRepeatingNumber() {
        int[] arr = {2, 3, 5, 4, 5, 3, 4, 2, 9};
        int expected = 9;
        int actual = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
        assertEquals(expected, actual);
    }
    @Test
    @Tag("valid")
    public void testNegativeNumbersWithNonRepeatingNumber() {
        int[] arr = {-2, -3, -2, -3, -4};
        int expected = -4;
        int actual = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
        assertEquals(expected, actual);
    }
    @Test
    @Tag("valid")
    public void testMixedNumbersWithNonRepeatingNumber() {
        int[] arr = {2, 3, -2, -3, 2, 3, -4};
        int expected = -4;
        int actual = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
        assertEquals(expected, actual);
    }
    @Test
    @Tag("boundary")
    public void testAllRepeatingNumbers() {
        int[] arr = {2, 3, 2, 3};
        int expected = 0;
        int actual = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
        assertEquals(expected, actual);
    }
    @Test
    @Tag("invalid")
    public void testEmptyArray() {
        int[] arr = {};
        int expected = 0;
        int actual = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
        assertEquals(expected, actual);
    }
}